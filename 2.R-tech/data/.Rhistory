#    -- (2) 利用網絡協助編程偵錯 --> 在搜尋引擎中下關鍵字 R 遇到錯誤時的指令 錯誤信息
#                                --> 建議可以加上 stackoverflow 網站，會有若干種直接的解答
#                                      如爬文時發生錯誤: R getURL Could not resolve host stackoverflow
### install.packages("datasets")
library(MASS)   #  library(datasets);
Insurance
#####===== (1C) 企業(檔案)數據 [黃文3.2] =====#####
##== (1)最常用的.csv檔案格式 (read.csv) [黃文3.2.1]
write.csv(Insurance, "insurance.csv")
csv1 = read.csv("insurance.csv");       csv2 <- read.table("insurance.csv")
##== (2).txt檔案格式兩種讀取方法的比較 (read.table(), read.csv()) [黃文3.2.1]
write.table(Insurance, "insurance.txt")
txt1 = read.csv("insurance.txt");       txt2 = read.table("insurance.txt")
write.table(Insurance, "insurance.comma",sep=",")
comma1 = read.csv("insurance.comma");
comma2 = read.table("insurance.comma")
comma2A = read.table("insurance.comma",sep=",")
write.table(Insurance, "insurance.slash",sep="/")
slash1 = read.csv("insurance.slash");   slash2 <- read.table("insurance.slash")
slash2A = read.table("insurance.slash",sep="/")
##== (3) 最強悍的讀取指令 (readLines())
ftpfile1 = readLines("ftpfile1.txt")    #-- [Munzert, Ch.13: 加州天氣數據]
##== (4) 特別的讀取指令,可用於讀取網絡檔案 (scan())
#-- [Using R for Time Series Analysis, http://a-little-book-of-r-for-time-series.readthedocs.io/en/latest/src/timeseries.html]
kings = scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3)   #-- 從威廉一世開始的英國國王的去世年份數据
births = scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")   #-- 1946/01-1959/12 的紐約市每月出生人口數量
souvenir = scan("http://robjhyndman.com/tsdldata/data/fancy.dat")   #-- 1987/1-1993/12 昆士蘭海濱度假圣地的某紀念品商店販售數据
##== (5) 最通用的.xlsx檔案格式
### install.packages("readxl")
library(readxl)
xls1 = read_excel("insurance.xlsx")
csv123 = read.csv("电商123.csv",fileEncoding="Big5");
xls123 = read_excel("电商123.xls")   #-- 繁體windows系統不能用簡體字
wordset = c("鄭州市","蓮花街","中原區","思明區","李大爺","張三豐","李四")  #設定一個字串
nKind = NULL
nKind[grep("*市$",wordset)] = "nCity"    #取所有 市$ 標籤 nCity
nKind[grep("*區$",wordset)] = "nArea"    #取所有 區$ 標籤 nArea
nKind[grep("^李+",wordset)] = "nPerson"  #取所有 李+ 開頭，標籤 nPerson
nKind[grep("[李,張]+",wordset)] = "nPerson"
nKind
##== (1) (KDD1) 讀取數據 (RRlist/RR....csv-->RR)
library(data.table)
Rlist = c("RR1_500r6810")   #Rlist = c("RR1_500r6810","RR501_1000r6217","RR1001_1500r7707","RR1501_2000r8262")
for (k in 1:length(Rlist)) {
print(paste0(">> reading file - ",Rlist[k],".csv..."))
RRk = fread(paste0(Rlist[k],".csv"), encoding="UTF-8" )
if (k==1) { RR = RRk }   else { RR = rbind(RR,RRk) }
}
dim(RR);         #-- 6810   12
head(RR,2)       #-- 28996 / 464636
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data/")
wordset = c("鄭州市","蓮花街","中原區","思明區","李大爺","張三豐","李四")  #設定一個字串
nKind = NULL
nKind[grep("*市$",wordset)] = "nCity"    #取所有 市$ 標籤 nCity
nKind[grep("*區$",wordset)] = "nArea"    #取所有 區$ 標籤 nArea
nKind[grep("^李+",wordset)] = "nPerson"  #取所有 李+ 開頭，標籤 nPerson
nKind[grep("[李,張]+",wordset)] = "nPerson"
nKind
##== (1) (KDD1) 讀取數據 (RRlist/RR....csv-->RR)
library(data.table)
Rlist = c("RR1_500r6810")   #Rlist = c("RR1_500r6810","RR501_1000r6217","RR1001_1500r7707","RR1501_2000r8262")
for (k in 1:length(Rlist)) {
print(paste0(">> reading file - ",Rlist[k],".csv..."))
RRk = fread(paste0(Rlist[k],".csv"), encoding="UTF-8" )
if (k==1) { RR = RRk }   else { RR = rbind(RR,RRk) }
}
dim(RR);         #-- 6810   12
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data/")
wordset = c("鄭州市","蓮花街","中原區","思明區","李大爺","張三豐","李四")  #設定一個字串
nKind = NULL
nKind[grep("*市$",wordset)] = "nCity"    #取所有 市$ 標籤 nCity
nKind[grep("*區$",wordset)] = "nArea"    #取所有 區$ 標籤 nArea
nKind[grep("^李+",wordset)] = "nPerson"  #取所有 李+ 開頭，標籤 nPerson
nKind[grep("[李,張]+",wordset)] = "nPerson"
nKind
##== (1) (KDD1) 讀取數據 (RRlist/RR....csv-->RR)
library(data.table)
Rlist = c("RR1_500r6810")   #Rlist = c("RR1_500r6810","RR501_1000r6217","RR1001_1500r7707","RR1501_2000r8262")
for (k in 1:length(Rlist)) {
print(paste0(">> reading file - ",Rlist[k],".csv..."))
RRk = fread(paste0(Rlist[k],".csv"), encoding="UTF-8" )
if (k==1) { RR = RRk }   else { RR = rbind(RR,RRk) }
}
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data/")
dim(iris)    # 數據的筆數為150筆
head(iris,2) # 五個欄位(前四個單位為公分)：
#####===== (1) (KDD1) 讀取數據(-->X) =====#####
library(readxl)
X <- as.data.frame(read_excel('/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data/googleplaystore2.xlsX'))
#####===== (1) (KDD1) 讀取數據(-->X) =====#####
library(readxl)
X <- as.data.frame(read_excel('/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data/googleplaystore4_(7000).xlsX'))
dim(X);
library(arules)
library(arules)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)  #-- [1] 16598    11
X = read.csv("googleplaystore4_(7000).csv");
dim(X);
head(X,2)  #-- [1] 16598    11
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)  #-- [1] 16598    11
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)  #-- [1] 16598    11
table(table(X$Category))[1:17]
table(table(X$Category))
source('~/Documents/Github/USC_R_Git/2.R-tech/RtechSTD_Team.R', echo=TRUE)
table(table(X$Genres))
table(table(X$Genres))[1:17]
table(table(X$Category))
table(table(X$Category))
#table(table(X$Genres))[1:17]
# 37   38   43   47   51   56   59   61   63   84   89   95  110  116  144  160  166  171  177  179  211  223  235  245  247  266  278  279  324  627  966 1602
# 1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    1
t(X[1:20,7:10])
PG=table(X$Category,X$Rating);      rownames(PG)=NULL;  PG[1:10,]
PG=table(X$Category,X$Rating);      rownames(PG)=NULL;  PG[1:100,]
PG=table(X$Category,X$Rating);      rownames(PG)=NULL;  PG[1:10,]
# measure  X$Category and X$Rating 不同類別在評分的佔比數
PG=table(X$Category,X$Rating);      rownames(PG)=NULL;  PG[1:10,]
# measure  X$Category and X$Reviews 不同類別在評分的佔比數
PD=table(X$Category,X$Reviews);   rownames(PD)=NULL;  PD[1:10,]
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
arPD = apriori( txPD, parameter=list(support=0.05, confidence=0.7), control=list(verbose=FALSE));
inspect(arPD)[1:11,]
library(igraph)
graph.arPD = graph.edgelist( cbind(inspect(arPD)[1:11,]$lhs, inspect(arPD)[1:11,]$rhs) )
plot(graph.arPD)
library(arules)
library(igraph)
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/dataall/RR1_500r6810.csv")
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/dataall/")
#####===== (2A) 關聯分析(association analysis) [殷,5.1] =====#####
##== 關聯分析: 發現隱藏在大型數據集中的令人感興趣的聯繫
#              -- 關聯規則(association rule): 所發現的模式 if A1 and A2... then B
#              -- 關聯分析算法: 包括 Apriori算法, FP-growth算法
#              -- 其餘算法: 處理分類屬性, 處理連續屬性, 處理概念分層, 序列模式, 子圖模式, 非頻繁模式等 (均不介紹)
library(arules)
#####===== (2B) 事務/交易數據(transactions) [殷,5.2.1] =====#####
data(Groceries)
##== 購物籃(basket)事務/交易(transaction)
#    -- 事務/交易數據集: 所有的購物記錄, 即所有的事務/交易  D = {Ti} = {T1,T2,...,TN}
#    -- 事務/交易(transaction)Ti: 每一條購物記錄所購買的物品
#    -- 每個事務/交易是項(item)的集合 Ti included in I = { 1,2,...,im }, 每個事務/交易有一個標識符(TID)
inspect(Groceries[1:10])
#####===== (2B) 事務/交易數據(transactions) [殷,5.2.1] =====#####
data(Groceries)
##== 購物籃(basket)事務/交易(transaction)
#    -- 事務/交易數據集: 所有的購物記錄, 即所有的事務/交易  D = {Ti} = {T1,T2,...,TN}
#    -- 事務/交易(transaction)Ti: 每一條購物記錄所購買的物品
#    -- 每個事務/交易是項(item)的集合 Ti included in I = { 1,2,...,im }, 每個事務/交易有一個標識符(TID)
inspect(Groceries[1:10])
library(arules)
library(igraph)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)
#####===== (1) (KDD1) 讀取數據(-->X) =====#####
library(readxl)
X <- as.data.frame(read_excel('/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data/googleplaystore4_(7000).xlsX'))
library(arules)
library(igraph)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/")
library(arules)
library(igraph)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data")
library(arules)
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data")
library(arules)
library(igraph)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)
table(table(X$Category))
#table(table(X$Genres))[1:17]
# 37   38   43   47   51   56   59   61   63   84   89   95  110  116  144  160  166  171  177  179  211  223  235  245  247  266  278  279  324  627  966 1602
# 1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    1
t(X[1:20,7:10])
# measure  X$Category and X$Rating 不同類別在評分的佔比數
PG=table(X$Category,X$Rating);      rownames(PG)=NULL;  PG[1:10,]
# measure  X$Category and X$Reviews 不同類別在評分的佔比數
PD=table(X$Category,X$Installs);   rownames(PD)=NULL;  PD[1:10,]
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
arPD = apriori( txPD, parameter=list(support=0.05, confidence=0.7), control=list(verbose=FALSE));
inspect(arPD)[1:11,]
graph.arPD = graph.edgelist( cbind(inspect(arPD)[1:11,]$lhs, inspect(arPD)[1:11,]$rhs) )
plot(graph.arPD)
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data")
library(arules)
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data")
library(arules)
library(igraph)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)
table(table(X$Category))
#table(table(X$Genres))[1:17]
# 37   38   43   47   51   56   59   61   63   84   89   95  110  116  144  160  166  171  177  179  211  223  235  245  247  266  278  279  324  627  966 1602
# 1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    1
t(X[1:20,7:10])
# measure  X$Category and X$Rating 不同類別在評分的佔比數
PG=table(X$Category,X$Rating);      rownames(PG)=NULL;  PG[1:10,]
# measure  X$Category and X$Reviews 不同類別在評分的佔比數
PD=table(X$Category,X$Installs);   rownames(PD)=NULL;  PD[1:10,]
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
arPD = apriori( txPD, parameter=list(support=0.05, confidence=0.7), control=list(verbose=FALSE));
inspect(arPD)[1:5,]
summary(X)
inspect(X$Category[1:5])
inspect(X[1:5])
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data")
library(arules)
library(igraph)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)
summary(X)
inspect(X[1:5])
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
arPD = apriori( txPD, parameter=list(support=0.05, confidence=0.7), control=list(verbose=FALSE));
inspect(arPD)[1:5,]
inspect(arPD)[1:5]
# measure  X$Category and X$Rating 不同類別在評分的佔比數
PG=table(X$Category,X$Type);      rownames(PG)=NULL;  PG[1:10,]
# measure  X$Category and X$Reviews 不同類別在評分的佔比數
PD=table(X$Category,X$Price);   rownames(PD)=NULL;  PD[1:10,]
# measure  X$Category and X$Reviews 不同類別在評分的佔比數
PD=table(X$Category,X$Year);   rownames(PD)=NULL;  PD[1:10,]
table(table(X$Category))
# measure  X$Category and X$Rating 不同類別在評分的佔比數
PG=table(X$Category,X$Type);      rownames(PG)=NULL;  PG[1:10,]
# measure  X$Category and X$Rating 不同類別在評分的佔比數
PG=table(X$Category,X$Type);      rownames(PG)=NULL;  PG[1:10,]
PG
# measure  X$Category and X$Rating 不同類別在評分的佔比數
PG=table(X$Category,X$Type);      rownames(PG)=NULL;  PG #PG[1:10,]
# measure  X$Category and X$Reviews 不同類別在評分的佔比數
PD=table(X$Category,X$Year);   rownames(PD)=NULL;  PD
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data")
library(arules)
library(igraph)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)
# [1] 7684   16
# App                                            Category Rating   Reviews Size Installs Type Price Content.Rating                    Genres Last.Updated Year Month Day Current.Ver  Android.Ver
# Photo Editor & Candy Camera & Grid & ScrapBook ART_AND_DESIGN    4.1     159  19M    10,000 Free     0       Everyone              Art & Design     7-Jan-18 2018     1   7       1.0.0 4.0.3 and up
#                            Coloring book moana ART_AND_DESIGN    3.9     967  14M   500,000 Free     0       Everyone Art & Design;Pretend Play    15-Jan-18 2018     1  15       2.0.0 4.0.3 and up
summary(X)
table(table(X$Category))
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
PG=table(X$Category,X$Type);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Category,X$Year);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
inspect(arPD)[1:5]
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data")
library(arules)
library(igraph)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)
# [1] 7684   16
# App                                            Category Rating   Reviews Size Installs Type Price Content.Rating                    Genres Last.Updated Year Month Day Current.Ver  Android.Ver
# Photo Editor & Candy Camera & Grid & ScrapBook ART_AND_DESIGN    4.1     159  19M    10,000 Free     0       Everyone              Art & Design     7-Jan-18 2018     1   7       1.0.0 4.0.3 and up
#                            Coloring book moana ART_AND_DESIGN    3.9     967  14M   500,000 Free     0       Everyone Art & Design;Pretend Play    15-Jan-18 2018     1  15       2.0.0 4.0.3 and up
summary(X)
table(table(X$Category))
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
PG=table(X$Category,X$Type);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Category,X$Year);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
# apriori演算法大概是這樣運作的，我們必須要設定support以及confidence:
# 支持度(support)：「規則」在資料內具有普遍性，也就是這些 A 跟 B 同時出現的機率多少。
# 信賴度(confidence)：「規則」要有一定的信心水準，也就是當購買 A 狀態下，也會購買 B 的條件機率。
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
arPD = apriori( txPD, parameter=list(support=0.05, confidence=0.7), control=list(verbose=FALSE));
inspect(arPD)[1:5,]
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
PG=table(X$Category,X$Year);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data")
library(arules)
library(igraph)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)
# [1] 7684   16
# App                                            Category Rating   Reviews Size Installs Type Price Content.Rating                    Genres Last.Updated Year Month Day Current.Ver  Android.Ver
# Photo Editor & Candy Camera & Grid & ScrapBook ART_AND_DESIGN    4.1     159  19M    10,000 Free     0       Everyone              Art & Design     7-Jan-18 2018     1   7       1.0.0 4.0.3 and up
#                            Coloring book moana ART_AND_DESIGN    3.9     967  14M   500,000 Free     0       Everyone Art & Design;Pretend Play    15-Jan-18 2018     1  15       2.0.0 4.0.3 and up
summary(X)
table(table(X$Category))
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
PG=table(X$Category,X$Year);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Category,X$Type);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
# apriori演算法大概是這樣運作的，我們必須要設定support以及confidence:
# 支持度(support)：「規則」在資料內具有普遍性，也就是這些 A 跟 B 同時出現的機率多少。
# 信賴度(confidence)：「規則」要有一定的信心水準，也就是當購買 A 狀態下，也會購買 B 的條件機率。
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
arPD = apriori( txPD, parameter=list(support=0.05, confidence=0.7), control=list(verbose=FALSE));
inspect(arPD)[1:5,]
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
PG=table(X$Category,X$Year);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Year,X$Category);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
# apriori演算法大概是這樣運作的，我們必須要設定support以及confidence:
# 支持度(support)：「規則」在資料內具有普遍性，也就是這些 A 跟 B 同時出現的機率多少。
# 信賴度(confidence)：「規則」要有一定的信心水準，也就是當購買 A 狀態下，也會購買 B 的條件機率。
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
arPD = apriori( txPD, parameter=list(support=0.05, confidence=0.7), control=list(verbose=FALSE));
inspect(arPD)[1:5,]
s
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data")
library(arules)
library(igraph)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)
# [1] 7684   16
# App                                            Category Rating   Reviews Size Installs Type Price Content.Rating                    Genres Last.Updated Year Month Day Current.Ver  Android.Ver
# Photo Editor & Candy Camera & Grid & ScrapBook ART_AND_DESIGN    4.1     159  19M    10,000 Free     0       Everyone              Art & Design     7-Jan-18 2018     1   7       1.0.0 4.0.3 and up
#                            Coloring book moana ART_AND_DESIGN    3.9     967  14M   500,000 Free     0       Everyone Art & Design;Pretend Play    15-Jan-18 2018     1  15       2.0.0 4.0.3 and up
summary(X)
table(table(X$Category))
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
#PG=table(X$Category,X$Year);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Year,X$Category);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
# apriori演算法大概是這樣運作的，我們必須要設定support以及confidence:
# 支持度(support)：「規則」在資料內具有普遍性，也就是這些 A 跟 B 同時出現的機率多少。
# 信賴度(confidence)：「規則」要有一定的信心水準，也就是當購買 A 狀態下，也會購買 B 的條件機率。
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
arPD = apriori( txPD, parameter=list(support=0.05, confidence=0.7), control=list(verbose=FALSE));
inspect(arPD)[1:5,]
graph.arPD = graph.edgelist( cbind(inspect(arPD)[1:5,]$lhs, inspect(arPD)[1:5,]$rhs) )
plot(graph.arPD)
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data")
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data")
library(arules);library(igraph)
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data")
library(arules);library(igraph)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)
# [1] 7684   16
# App                                            Category Rating   Reviews Size Installs Type Price Content.Rating                    Genres Last.Updated Year Month Day Current.Ver  Android.Ver
# Photo Editor & Candy Camera & Grid & ScrapBook ART_AND_DESIGN    4.1     159  19M    10,000 Free     0       Everyone              Art & Design     7-Jan-18 2018     1   7       1.0.0 4.0.3 and up
#                            Coloring book moana ART_AND_DESIGN    3.9     967  14M   500,000 Free     0       Everyone Art & Design;Pretend Play    15-Jan-18 2018     1  15       2.0.0 4.0.3 and up
summary(X)
table(table(X$Category))
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
#PG=table(X$Category,X$Year);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Category,X$Genres);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
# apriori演算法大概是這樣運作的，我們必須要設定support以及confidence:
# 支持度(support)：「規則」在資料內具有普遍性，也就是這些 A 跟 B 同時出現的機率多少。
# 信賴度(confidence)：「規則」要有一定的信心水準，也就是當購買 A 狀態下，也會購買 B 的條件機率。
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
arPD = apriori( txPD, parameter=list(support=0.05, confidence=0.7), control=list(verbose=FALSE));
#lhs=>rhs 代表買左邊也會買右邊的意思，而支持度與信賴度，則分別代表了普遍性與信心水準。
inspect(arPD)[1:5,]
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
#PG=table(X$Category,X$Year);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Year,X$Rating);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
# apriori演算法大概是這樣運作的，我們必須要設定support以及confidence:
# 支持度(support)：「規則」在資料內具有普遍性，也就是這些 A 跟 B 同時出現的機率多少。
# 信賴度(confidence)：「規則」要有一定的信心水準，也就是當購買 A 狀態下，也會購買 B 的條件機率。
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
arPD = apriori( txPD, parameter=list(support=0.05, confidence=0.7), control=list(verbose=FALSE));
#lhs=>rhs 代表買左邊也會買右邊的意思，而支持度與信賴度，則分別代表了普遍性與信心水準。
inspect(arPD)[1:5,]
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
#PG=table(X$Category,X$Year);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Year);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data")
library(arules);library(igraph)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)
# [1] 7684   16
# App                                            Category Rating   Reviews Size Installs Type Price Content.Rating                    Genres Last.Updated Year Month Day Current.Ver  Android.Ver
# Photo Editor & Candy Camera & Grid & ScrapBook ART_AND_DESIGN    4.1     159  19M    10,000 Free     0       Everyone              Art & Design     7-Jan-18 2018     1   7       1.0.0 4.0.3 and up
#                            Coloring book moana ART_AND_DESIGN    3.9     967  14M   500,000 Free     0       Everyone Art & Design;Pretend Play    15-Jan-18 2018     1  15       2.0.0 4.0.3 and up
summary(X)
table(table(X$Category))
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
#PG=table(X$Category,X$Year);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Year);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
# apriori演算法大概是這樣運作的，我們必須要設定support以及confidence:
# 支持度(support)：「規則」在資料內具有普遍性，也就是這些 A 跟 B 同時出現的機率多少。
# 信賴度(confidence)：「規則」要有一定的信心水準，也就是當購買 A 狀態下，也會購買 B 的條件機率。
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
arPD = apriori( txPD, parameter=list(support=0.05, confidence=0.7), control=list(verbose=FALSE));
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
#PG=table(X$Category,X$Year);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Year,X$Year);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data")
library(arules);library(igraph)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)
# [1] 7684   16
# App                                            Category Rating   Reviews Size Installs Type Price Content.Rating                    Genres Last.Updated Year Month Day Current.Ver  Android.Ver
# Photo Editor & Candy Camera & Grid & ScrapBook ART_AND_DESIGN    4.1     159  19M    10,000 Free     0       Everyone              Art & Design     7-Jan-18 2018     1   7       1.0.0 4.0.3 and up
#                            Coloring book moana ART_AND_DESIGN    3.9     967  14M   500,000 Free     0       Everyone Art & Design;Pretend Play    15-Jan-18 2018     1  15       2.0.0 4.0.3 and up
summary(X)
table(table(X$Category))
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
#PG=table(X$Category,X$Year);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Year,X$Year);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
# apriori演算法大概是這樣運作的，我們必須要設定support以及confidence:
# 支持度(support)：「規則」在資料內具有普遍性，也就是這些 A 跟 B 同時出現的機率多少。
# 信賴度(confidence)：「規則」要有一定的信心水準，也就是當購買 A 狀態下，也會購買 B 的條件機率。
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
arPD = apriori( txPD, parameter=list(support=0.05, confidence=0.7), control=list(verbose=FALSE));
#lhs=>rhs 代表買左邊也會買右邊的意思，而支持度與信賴度，則分別代表了普遍性與信心水準。
inspect(arPD)[1:5,]
graph.arPD = graph.edgelist( cbind(inspect(arPD)[1:5,]$lhs, inspect(arPD)[1:5,]$rhs) )
table(table(X$Category))
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
#PG=table(X$Category,X$Year);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Year,X$Year);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
# apriori演算法大概是這樣運作的，我們必須要設定support以及confidence:
# 支持度(support)：「規則」在資料內具有普遍性，也就是這些 A 跟 B 同時出現的機率多少。
# 信賴度(confidence)：「規則」要有一定的信心水準，也就是當購買 A 狀態下，也會購買 B 的條件機率。
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
arPD = apriori( txPD, parameter=list(support=0.05, confidence=0.7), control=list(verbose=FALSE));
#lhs=>rhs 代表買左邊也會買右邊的意思，而支持度與信賴度，則分別代表了普遍性與信心水準。
inspect(arPD)[1:5,]
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data")
library(arules);library(igraph)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)
# [1] 7684   16
# App                                            Category Rating   Reviews Size Installs Type Price Content.Rating                    Genres Last.Updated Year Month Day Current.Ver  Android.Ver
# Photo Editor & Candy Camera & Grid & ScrapBook ART_AND_DESIGN    4.1     159  19M    10,000 Free     0       Everyone              Art & Design     7-Jan-18 2018     1   7       1.0.0 4.0.3 and up
#                            Coloring book moana ART_AND_DESIGN    3.9     967  14M   500,000 Free     0       Everyone Art & Design;Pretend Play    15-Jan-18 2018     1  15       2.0.0 4.0.3 and up
summary(X)
table(table(X$Category))
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
#PG=table(X$Category,X$Year);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Year,X$Type);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
# apriori演算法大概是這樣運作的，我們必須要設定support以及confidence:
# 支持度(support)：「規則」在資料內具有普遍性，也就是這些 A 跟 B 同時出現的機率多少。
# 信賴度(confidence)：「規則」要有一定的信心水準，也就是當購買 A 狀態下，也會購買 B 的條件機率。
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
arPD = apriori( txPD, parameter=list(support=0.05, confidence=0.7), control=list(verbose=FALSE));
#lhs=>rhs 代表買左邊也會買右邊的意思，而支持度與信賴度，則分別代表了普遍性與信心水準。
inspect(arPD)[1:5,]
library(arules);library(igraph)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)
# [1] 7684   16
# App                                            Category Rating   Reviews Size Installs Type Price Content.Rating                    Genres Last.Updated Year Month Day Current.Ver  Android.Ver
# Photo Editor & Candy Camera & Grid & ScrapBook ART_AND_DESIGN    4.1     159  19M    10,000 Free     0       Everyone              Art & Design     7-Jan-18 2018     1   7       1.0.0 4.0.3 and up
#                            Coloring book moana ART_AND_DESIGN    3.9     967  14M   500,000 Free     0       Everyone Art & Design;Pretend Play    15-Jan-18 2018     1  15       2.0.0 4.0.3 and up
summary(X)
table(table(X$Category))
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
#PG=table(X$Category,X$Year);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Type,X$Year);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
# apriori演算法大概是這樣運作的，我們必須要設定support以及confidence:
# 支持度(support)：「規則」在資料內具有普遍性，也就是這些 A 跟 B 同時出現的機率多少。
# 信賴度(confidence)：「規則」要有一定的信心水準，也就是當購買 A 狀態下，也會購買 B 的條件機率。
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
arPD = apriori( txPD, parameter=list(support=0.05, confidence=0.7), control=list(verbose=FALSE));
#lhs=>rhs 代表買左邊也會買右邊的意思，而支持度與信賴度，則分別代表了普遍性與信心水準。
inspect(arPD)[1:5,]
#lhs=>rhs 代表買左邊也會買右邊的意思，而支持度與信賴度，則分別代表了普遍性與信心水準。
inspect(arPD[1:5,])
#lhs=>rhs 代表買左邊也會買右邊的意思，而支持度與信賴度，則分別代表了普遍性與信心水準。
inspect(arPD[1:5,2])
#lhs=>rhs 代表買左邊也會買右邊的意思，而支持度與信賴度，則分別代表了普遍性與信心水準。
inspect(arPD[1:10,])
#lhs=>rhs 代表買左邊也會買右邊的意思，而支持度與信賴度，則分別代表了普遍性與信心水準。
inspect(arPD[9:20,])
graph.arPD = graph.edgelist( cbind(inspect(arPD)[1:5,]$lhs, inspect(arPD)[1:5,]$rhs) )
plot(graph.arPD)
source('~/Documents/Github/USC_R_Git/2.R-tech/RtechSTD_Team.R', echo=TRUE)
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data")
library(arules);library(igraph)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)
# [1] 7684   16
# App                                            Category Rating   Reviews Size Installs Type Price Content.Rating                    Genres Last.Updated Year Month Day Current.Ver  Android.Ver
# Photo Editor & Candy Camera & Grid & ScrapBook ART_AND_DESIGN    4.1     159  19M    10,000 Free     0       Everyone              Art & Design     7-Jan-18 2018     1   7       1.0.0 4.0.3 and up
#                            Coloring book moana ART_AND_DESIGN    3.9     967  14M   500,000 Free     0       Everyone Art & Design;Pretend Play    15-Jan-18 2018     1  15       2.0.0 4.0.3 and up
summary(X)
table(table(X$Category))
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
#PG=table(X$Category,X$Year);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Type,X$Year);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
#PG=table(X$Category,X$Year);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Type,X$Year);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
# apriori演算法大概是這樣運作的，我們必須要設定support以及confidence:
# 支持度(support)：「規則」在資料內具有普遍性，也就是這些 A 跟 B 同時出現的機率多少。
# 信賴度(confidence)：「規則」要有一定的信心水準，也就是當購買 A 狀態下，也會購買 B 的條件機率。
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
arPD = apriori( txPD, parameter=list(support=0.05, confidence=0.7), control=list(verbose=FALSE));
#lhs=>rhs 代表買左邊也會買右邊的意思，而支持度與信賴度，則分別代表了普遍性與信心水準。
inspect(arPD[9:20,])
setwd("/Users/juck30808/Documents/Github/USC_R_Git/2.R-tech/data")
library(arules);library(igraph)
data(Groceries)
X = read.csv("googleplaystore4_(7000).csv");   dim(X);   head(X,2)
# [1] 7684   16
# App                                            Category Rating   Reviews Size Installs Type Price Content.Rating                    Genres Last.Updated Year Month Day Current.Ver  Android.Ver
# Photo Editor & Candy Camera & Grid & ScrapBook ART_AND_DESIGN    4.1     159  19M    10,000 Free     0       Everyone              Art & Design     7-Jan-18 2018     1   7       1.0.0 4.0.3 and up
#                            Coloring book moana ART_AND_DESIGN    3.9     967  14M   500,000 Free     0       Everyone Art & Design;Pretend Play    15-Jan-18 2018     1  15       2.0.0 4.0.3 and up
summary(X)
table(table(X$Category))
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
#PG=table(X$Category,X$Year);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Type,X$Category);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
# apriori演算法大概是這樣運作的，我們必須要設定support以及confidence:
# 支持度(support)：「規則」在資料內具有普遍性，也就是這些 A 跟 B 同時出現的機率多少。
# 信賴度(confidence)：「規則」要有一定的信心水準，也就是當購買 A 狀態下，也會購買 B 的條件機率。
txPD = lapply( 1:dim(PD), FUN=function(k) colnames(PD)[which(PD[k,]>0)] )
arPD = apriori( txPD, parameter=list(support=0.05, confidence=0.7), control=list(verbose=FALSE));
#lhs=>rhs 代表買左邊也會買右邊的意思，而支持度與信賴度，則分別代表了普遍性與信心水準。
inspect(arPD[9:20,])
# measure 評估各個品類(Category) 在有多少有 免費/年份推出
#PG=table(X$Category,X$Year);   rownames(PG)=NULL;  PG  # 1-33個品項  #PG[1:10,]
PD=table(X$Type,X$Year);   rownames(PD)=NULL;  PD     # 1-33個品項  #PD[1:10,]
